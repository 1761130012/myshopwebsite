<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.OrderDao">

    <resultMap id="joinType" type="com.example.vo.OrderVo">
        <id property="orderId" column="order_id"/>
        <association property="userVo" column="user_id"
                     select="com.example.dao.UserDao.selectById"/>
    </resultMap>

    <select id="selectPageVo" resultMap="joinType" >
        SELECT * FROM order_goods o INNER JOIN `user` u ON o.user_id = u.user_id
        <where>
            <if test="orderVo!=null">
                <if test="orderVo.userVo!=null">
                    <if test="orderVo.userVo.name!=null">and u.name like concat ('%',#{orderVo.userVo.name},'%')</if>
                </if>
                <if test="orderVo.state!=null">and o.state = #{orderVo.state}</if>
            </if>
        </where>
    </select>

    <sql id="tableName">
        order_goods
    </sql>

    <sql id="allFiledSql">
        order_id,user_id,shop_id,start_time,end_time,money,remark,pay_state,state,is_delete
    </sql>

    <!-- void updateCountMoneyById(@Param("orderId") String orderId, @Param("countMoney") Float countMoney); -->
    <update id="updateCountMoneyById">
        update money=#{countMoney} where order_id=#{orderId}
    </update>
    <select id="selectPayStateByOrderId" resultType="com.example.vo.OrderVo">
        select pay_state,state from order_goods
        where order_id = #{orderId,jdbcType=VARCHAR}
    </select>

    <!-- List<OrderVo> selectTimeCountMoneyByTime(@Param("shopId") Integer shopId,
                                             @Param("orderVo") OrderVo orderVo); -->
    <select id="selectTimeCountMoneyByTime" resultType="com.example.vo.OrderVo">
        select end_time,money from
        <include refid="tableName"/>
        <where>
            <choose>
                <when test="orderVo.startTime !=null and orderVo.endTime !=null ">
                    and end_time >= #{orderVo.startTime} and #{orderVo.endTime} >=
                    end_time
                </when>
                <when test="orderVo.startTime != null ">
                    and end_time = #{orderVo.startTime}
                </when>
                <when test="orderVo.endTime != null ">
                    and end_time = #{orderVo.endTime}
                </when>
            </choose>
            and state= #{orderVo.state}
        </where>
        order by end_time asc
    </select>
</mapper>
